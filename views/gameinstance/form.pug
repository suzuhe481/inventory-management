extends ../template/layout

block content 
  h1= title

  p #[strong Admin access is required to submit this form.]
  br

  form(method="POST" action="")
    div.form-group
      label(for="password") Password: 
      input#password.form-control(type="password" name="password" required=true)

    div.form-group
      label(for="game") Game: 
      select#game.form-control(type="select" placeholder="Select Game" name="game" required=true)
        option(value="" disabled selected) Select Game
        for game in game_list 
          option(value=game._id selected=(gameinstance === undefined ? false : gameinstance.game==game._id.toString())) #{game.title}

    div.form-group
      label(for="console") Console: 
      select#console.form-control(type="select" placeholder="Select Console" name="console" required=true)
        option(value="" disabled selected) Select Console

    div.form-group   
      label(for="price") Price:
      input#price.form-control(type="number" name="price" min=0.00 step=0.01 required=true value=(gameinstance===undefined ? "" : gameinstance.price.toFixed(2)))

    div.form-group
      label(for="condition") Condition: 
      select#condition.form-control(type="select" placeholder="Select Condition" name="condition" required=true)
        option(value="" disabled selected) Select Condition
        option(value="New" selected=(gameinstance===undefined || gameinstance.condition!="New" ? false : "selected")) New 
        option(value="Used" selected=(gameinstance===undefined || gameinstance.condition!="Used" ? false : "selected")) Used
      
    button.btn.btn-primary(type="submit") Submit

  if errors 
    ul 
      for error in errors 
        li!= error.msg

  
  script.
    /*
    The below script creates a dynamic dropdown for Console selection 
    based on current value in Game selection.
    */

    // Get all games in dropdown.
    var games = !{JSON.stringify(game_list)};

    // Get game instance if form was submitted.
    var gameinstance = !{gameinstance ? JSON.stringify(gameinstance) : "undefined"}

    // Get Games dropdown and Consoles dropdown elements.
    var dropdownGames = document.getElementById("game");
    var dropdownConsoles = document.getElementById("console");

    // Alters options inside Console dropdown based on games dropdown selected.
    const dropdownGames_onChangeHandler = () => {
      var indexSelected = dropdownGames.options.selectedIndex - 1;

      // Valid when index is a game. (Not the "Select Game" option)
      if (indexSelected > -1) {
        var gameSelected = games[indexSelected];
        var gameSelectedConsoles = games[indexSelected].consoles_available;

        // Clear current options.
        dropdownConsoles.innerHTML = "";

        // Iterate through selected game's consoles and create HTML options for each console.
        for (var i = 0; i < gameSelectedConsoles.length; i++) {
          const newOption = document.createElement("option");
          newOption.value = gameSelectedConsoles[i]._id;
          newOption.innerText = gameSelectedConsoles[i].name;

          // Set option as selected if form was previously submitted.
          if (gameinstance) {
            if (gameinstance.console == gameSelectedConsoles[i]._id) {
              newOption.selected = true;
            }
          }
          
          // Append new options.
          dropdownConsoles.appendChild(newOption);
        }
      }
    };

    dropdownGames_onChangeHandler();
    dropdownGames.addEventListener("change", dropdownGames_onChangeHandler);